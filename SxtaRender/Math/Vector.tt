<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
 	 var types = new string [] {"int", "uint", "float", "double"};
	 var hasDec = new bool[] {false, false, true, true};
	 var arr4Types = new string [] {"Vector4i", "Vector4ui", "Vector4f", "Vector4d"};
	 var arr3Types = new string [] {"Vector3i", "Vector3ui", "Vector3f", "Vector3d"};
	 var arr2Types = new string [] {"Vector2i", "Vector2ui", "Vector2f", "Vector2d"};
	 var quatTypes = new string [] {"N/A", "N/A", "Quaternion", "Quaterniond"};
 #>
#region --- License ---
/*
Copyright (c) 2008 - 2016 The Sxta Render library.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#endregion

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using OpenTK;

namespace Sxta.Math
{
<#  
  for  (int i = 0; i < types.Length; i++) 
  { 
	var typeName = types[i];
	var vec4Name = arr4Types[i];
	var vec3Name = arr3Types[i];
	var vec2Name = arr2Types[i];
	var quatName = quatTypes[i];
  #>
      /// <summary>Represents a 2D vector using two <#= typeName #>-precision floating-point numbers.</summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct <#= vec2Name #> : IEquatable<<#= vec2Name #>>
    {
        #region Fields

        /// <summary>The X coordinate of this instance.</summary>
        public <#= typeName #> X;

        /// <summary>The Y coordinate of this instance.</summary>
        public <#= typeName #> Y;

        /// <summary>
        /// Defines a unit-length <#= vec2Name #> that points towards the X-axis.
        /// </summary>
        public static <#= vec2Name #> UnitX = new <#= vec2Name #>(1, 0);

        /// <summary>
        /// Defines a unit-length <#= vec2Name #> that points towards the Y-axis.
        /// </summary>
        public static <#= vec2Name #> UnitY = new <#= vec2Name #>(0, 1);

        /// <summary>
        /// Defines a zero-length <#= vec2Name #>.
        /// </summary>
        public static <#= vec2Name #> Zero = new <#= vec2Name #>(0, 0);

        /// <summary>
        /// Defines an instance with all components set to 1.
        /// </summary>
        public static readonly <#= vec2Name #> One = new <#= vec2Name #>(1, 1);

        /// <summary>
        /// Defines the size of the <#= vec2Name #> struct in bytes.
        /// </summary>
        public static readonly int SizeInBytes = Marshal.SizeOf(new <#= vec2Name #>());

        #endregion

        #region Constructors

        /// <summary>Constructs a new instance with the given coordinates.</summary>
        /// <param name="x">The X coordinate.</param>
        /// <param name="y">The Y coordinate.</param>
        public <#= vec2Name #>(<#= typeName #> x, <#= typeName #> y)
        {
            this.X = x;
            this.Y = y;
        }
		
		/// <summary>
        /// Constructs a new instance from the given vector.
        /// </summary>
        /// <param name="v">The <#= vec2Name #> to copy components from.</param>
        public <#= vec2Name #>(<#= vec2Name #> v)
        {
            X = v.X;
            Y = v.Y;
        }

        #endregion

        #region Public Members

        #region Instance

        #region public void Add()

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Add() method instead.")]
        public void Add(<#= vec2Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
        }

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Add() method instead.")]
        public void Add(ref <#= vec2Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
        }

        #endregion public void Add()

        #region public void Sub()

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(<#= vec2Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
        }

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(ref <#= vec2Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
        }

        #endregion public void Sub()

        #region public void Mult()

        /// <summary>Multiply this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Mult(<#= typeName #> f)
        {
            this.X *= f;
            this.Y *= f;
        }

        #endregion public void Mult()

        #region public void Div()

        /// <summary>Divide this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Divide() method instead.")]
        public void Div(<#= typeName #> f)
        {
            double mult = 1.0 / f;
            this.X = (<#= typeName #>)(this.X * mult);
            this.Y = (<#= typeName #>)(this.Y * mult);
        }

        #endregion public void Div()

        #region public <#= typeName #> Length

        /// <summary>
        /// Gets the length (magnitude) of the vector.
        /// </summary>
        /// <seealso cref="LengthSquared"/>
        public double Length
        {
            get
            {
                return System.Math.Sqrt(X * X + Y * Y);
            }
        }

        #endregion

        #region public <#= typeName #> LengthSquared

        /// <summary>
        /// Gets the square of the vector length (magnitude).
        /// </summary>
        /// <remarks>
        /// This property avoids the costly square root operation required by the Length property. This makes it more suitable
        /// for comparisons.
        /// </remarks>
        /// <see cref="Length"/>
        public <#= typeName #> LengthSquared
        {
            get
            {
                return X * X + Y * Y;
            }
        }

        #endregion

        #region public <#= vec2Name #> PerpendicularRight

        /// <summary>
        /// Gets the perpendicular vector on the right side of this vector.
        /// </summary>
        public <#= vec2Name #> PerpendicularRight
        {
            get
            {
                return new <#= vec2Name #>(Y, (<#= typeName #>)-X);
            }
        }

        #endregion

        #region public <#= vec2Name #> PerpendicularLeft

        /// <summary>
        /// Gets the perpendicular vector on the left side of this vector.
        /// </summary>
        public <#= vec2Name #> PerpendicularLeft
        {
            get
            {
                return new <#= vec2Name #>((<#= typeName #>)-Y, X);
            }
        }

        #endregion

        #region public void Normalize()

        /// <summary>
        /// Scales the Vector2 to unit length.
        /// </summary>
        public void Normalize()
        {
            double scale = 1.0 / Length;
            X = (<#= typeName #>)(this.X * scale);
            Y = (<#= typeName #>)(this.Y * scale);
        }

        #endregion

        #region public void Scale()

        /// <summary>
        /// Scales the current Vector2 by the given amounts.
        /// </summary>
        /// <param name="sx">The scale of the X component.</param>
        /// <param name="sy">The scale of the Y component.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(<#= typeName #> sx, <#= typeName #> sy)
        {
            X *= sx;
            Y *= sy;
        }

        /// <summary>Scales this instance by the given parameter.</summary>
        /// <param name="scale">The scaling of the individual components.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(<#= vec2Name #> scale)
        {
            this.X *= scale.X;
            this.Y *= scale.Y;
        }

        /// <summary>Scales this instance by the given parameter.</summary>
        /// <param name="scale">The scaling of the individual components.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(ref <#= vec2Name #> scale)
        {
            this.X *= scale.X;
            this.Y *= scale.Y;
        }

        #endregion public void Scale()

        #endregion

        #region Static

        #region Obsolete

        #region Sub

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>Result of subtraction</returns>
        [Obsolete("Use static Subtract() method instead.")]
        public static <#= vec2Name #> Sub(<#= vec2Name #> a, <#= vec2Name #> b)
        {
            a.X -= b.X;
            a.Y -= b.Y;
            return a;
        }

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">Result of subtraction</param>
        [Obsolete("Use static Subtract() method instead.")]
        public static void Sub(ref <#= vec2Name #> a, ref <#= vec2Name #> b, out <#= vec2Name #> result)
        {
            result.X = a.X - b.X;
            result.Y = a.Y - b.Y;
        }

        #endregion

        #region Mult

        /// <summary>
        /// Multiply a vector and a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="d">Scalar operand</param>
        /// <returns>Result of the multiplication</returns>
        [Obsolete("Use static Multiply() method instead.")]
        public static <#= vec2Name #> Mult(<#= vec2Name #> a, <#= typeName #> d)
        {
            a.X *= d;
            a.Y *= d;
            return a;
        }

        /// <summary>
        /// Multiply a vector and a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="d">Scalar operand</param>
        /// <param name="result">Result of the multiplication</param>
        [Obsolete("Use static Multiply() method instead.")]
        public static void Mult(ref <#= vec2Name #> a, <#= typeName #> d, out <#= vec2Name #> result)
        {
            result.X = a.X * d;
            result.Y = a.Y * d;
        }

        #endregion

        #region Div

        /// <summary>
        /// Divide a vector by a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="d">Scalar operand</param>
        /// <returns>Result of the division</returns>
        [Obsolete("Use static Divide() method instead.")]
        public static <#= vec2Name #> Div(<#= vec2Name #> a, <#= typeName #> d)
        {
			double mult = 1.0 / d;
            a.X = (<#= typeName #>)(a.X * mult);
            a.Y = (<#= typeName #>)(a.Y * mult);

            return a;
        }

        /// <summary>
        /// Divide a vector by a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="d">Scalar operand</param>
        /// <param name="result">Result of the division</param>
        [Obsolete("Use static Divide() method instead.")]
        public static void Div(ref <#= vec2Name #> a, <#= typeName #> d, out <#= vec2Name #> result)
        {
			double mult = 1.0 / d;
            result.X = (<#= typeName #>)(a.X * mult);
            result.Y = (<#= typeName #>)(a.Y * mult);
        }

        #endregion

        #endregion

        #region Add

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <returns>Result of operation.</returns>
        public static <#= vec2Name #> Add(<#= vec2Name #> a, <#= vec2Name #> b)
        {
            Add(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <param name="result">Result of operation.</param>
        public static void Add(ref <#= vec2Name #> a, ref <#= vec2Name #> b, out <#= vec2Name #> result)
        {
            result = new <#= vec2Name #>(a.X + b.X, a.Y + b.Y);
        }

        #endregion

        #region Subtract

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>Result of subtraction</returns>
        public static <#= vec2Name #> Subtract(<#= vec2Name #> a, <#= vec2Name #> b)
        {
            Subtract(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">Result of subtraction</param>
        public static void Subtract(ref <#= vec2Name #> a, ref <#= vec2Name #> b, out <#= vec2Name #> result)
        {
            result = new <#= vec2Name #>(a.X - b.X, a.Y - b.Y);
        }

        #endregion

        #region Multiply

        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec2Name #> Multiply(<#= vec2Name #> vector, <#= typeName #> scale)
        {
            Multiply(ref vector, scale, out vector);
            return vector;
        }

        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec2Name #> vector, <#= typeName #> scale, out <#= vec2Name #> result)
        {
            result = new <#= vec2Name #>(vector.X * scale, vector.Y * scale);
        }

        /// <summary>
        /// Multiplies a vector by the components a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec2Name #> Multiply(<#= vec2Name #> vector, <#= vec2Name #> scale)
        {
            Multiply(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Multiplies a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec2Name #> vector, ref <#= vec2Name #> scale, out <#= vec2Name #> result)
        {
            result = new <#= vec2Name #>(vector.X * scale.X, vector.Y * scale.Y);
        }

        #endregion

        #region Divide

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec2Name #> Divide(<#= vec2Name #> vector, <#= typeName #> scale)
        {
            Divide(ref vector, scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec2Name #> vector, <#= typeName #> scale, out <#= vec2Name #> result)
        {
            Multiply(ref vector, 1 / scale, out result);
        }

        /// <summary>
        /// Divides a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec2Name #> Divide(<#= vec2Name #> vector, <#= vec2Name #> scale)
        {
            Divide(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divide a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec2Name #> vector, ref <#= vec2Name #> scale, out <#= vec2Name #> result)
        {
            result = new <#= vec2Name #>(vector.X / scale.X, vector.Y / scale.Y);
        }

        #endregion

        #region Min

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise minimum</returns>
        public static <#= vec2Name #> Min(<#= vec2Name #> a, <#= vec2Name #> b)
        {
            a.X = a.X < b.X ? a.X : b.X;
            a.Y = a.Y < b.Y ? a.Y : b.Y;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise minimum</param>
        public static void Min(ref <#= vec2Name #> a, ref <#= vec2Name #> b, out <#= vec2Name #> result)
        {
            result.X = a.X < b.X ? a.X : b.X;
            result.Y = a.Y < b.Y ? a.Y : b.Y;
        }

        #endregion

        #region Max

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise maximum</returns>
        public static <#= vec2Name #> Max(<#= vec2Name #> a, <#= vec2Name #> b)
        {
            a.X = a.X > b.X ? a.X : b.X;
            a.Y = a.Y > b.Y ? a.Y : b.Y;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise maximum</param>
        public static void Max(ref <#= vec2Name #> a, ref <#= vec2Name #> b, out <#= vec2Name #> result)
        {
            result.X = a.X > b.X ? a.X : b.X;
            result.Y = a.Y > b.Y ? a.Y : b.Y;
        }

        #endregion

        #region Clamp

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <returns>The clamped vector</returns>
        public static <#= vec2Name #> Clamp(<#= vec2Name #> vec, <#= vec2Name #> min, <#= vec2Name #> max)
        {
            vec.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            vec.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
            return vec;
        }

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <param name="result">The clamped vector</param>
        public static void Clamp(ref <#= vec2Name #> vec, ref <#= vec2Name #> min, ref <#= vec2Name #> max, out <#= vec2Name #> result)
        {
            result.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            result.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
        }

        #endregion

        #region Normalize

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec2Name #> Normalize(<#= vec2Name #> vec)
        {
			double scale = 1.0 / vec.Length;
            vec.X = (<#= typeName #>)(vec.X * scale);
            vec.Y = (<#= typeName #>)(vec.Y * scale);

            return vec;
        }

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void Normalize(ref <#= vec2Name #> vec, out <#= vec2Name #> result)
        {
       		double scale = 1.0 / vec.Length;
            result.X = (<#= typeName #>)(vec.X * scale);
            result.Y = (<#= typeName #>)(vec.Y * scale);
        }

        #endregion

        #region NormalizeFast

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec2Name #> NormalizeFast(<#= vec2Name #> vec)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y);
            vec.X  = (<#= typeName #>)(vec.X * scale);
            vec.Y  = (<#= typeName #>)(vec.Y * scale);
            return vec;
        }

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void NormalizeFast(ref <#= vec2Name #> vec, out <#= vec2Name #> result)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y);
            result.X = (<#= typeName #>)(vec.X * scale);
            result.Y = (<#= typeName #>)(vec.Y * scale);
        }

        #endregion

        #region Dot

        /// <summary>
        /// Calculate the dot (scalar) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <returns>The dot product of the two inputs</returns>
        public static <#= typeName #> Dot(<#= vec2Name #> left, <#= vec2Name #> right)
        {
            return left.X * right.X + left.Y * right.Y;
        }

        /// <summary>
        /// Calculate the dot (scalar) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <param name="result">The dot product of the two inputs</param>
        public static void Dot(ref <#= vec2Name #> left, ref <#= vec2Name #> right, out <#= typeName #> result)
        {
            result = left.X * right.X + left.Y * right.Y;
        }

        #endregion

        #region Lerp

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        public static <#= vec2Name #> Lerp(<#= vec2Name #> a, <#= vec2Name #> b, <#= typeName #> blend)
        {
            a.X = blend * (b.X - a.X) + a.X;
            a.Y = blend * (b.Y - a.Y) + a.Y;
            return a;
        }

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        public static void Lerp(ref <#= vec2Name #> a, ref <#= vec2Name #> b, <#= typeName #> blend, out <#= vec2Name #> result)
        {
            result.X = blend * (b.X - a.X) + a.X;
            result.Y = blend * (b.Y - a.Y) + a.Y;
        }

        #endregion

        #region Barycentric

        /// <summary>
        /// Interpolate 3 Vectors using Barycentric coordinates
        /// </summary>
        /// <param name="a">First input Vector</param>
        /// <param name="b">Second input Vector</param>
        /// <param name="c">Third input Vector</param>
        /// <param name="u">First Barycentric Coordinate</param>
        /// <param name="v">Second Barycentric Coordinate</param>
        /// <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        public static <#= vec2Name #> BaryCentric(<#= vec2Name #> a, <#= vec2Name #> b, <#= vec2Name #> c, <#= typeName #> u, <#= typeName #> v)
        {
            return a + u * (b - a) + v * (c - a);
        }

        /// <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
        /// <param name="a">First input Vector.</param>
        /// <param name="b">Second input Vector.</param>
        /// <param name="c">Third input Vector.</param>
        /// <param name="u">First Barycentric Coordinate.</param>
        /// <param name="v">Second Barycentric Coordinate.</param>
        /// <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        public static void BaryCentric(ref <#= vec2Name #> a, ref <#= vec2Name #> b, ref <#= vec2Name #> c, <#= typeName #> u, <#= typeName #> v, out <#= vec2Name #> result)
        {
            result = a; // copy

            <#= vec2Name #> temp = b; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, u, out temp);
            Add(ref result, ref temp, out result);

            temp = c; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, v, out temp);
            Add(ref result, ref temp, out result);
        }

        #endregion

<# if (hasDec[i]) { #>
        #region Transform

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> Transform(<#= vec2Name #> vec, <#= quatName #> quat)
        {
            <#= vec2Name #> result;
            Transform(ref vec, ref quat, out result);
            return result;
        }

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <param name="result">The result of the operation.</param>
        public static void Transform(ref <#= vec2Name #> vec, ref <#= quatName #> quat, out <#= vec2Name #> result)
        {
            <#= quatName #> v = new <#= quatName #>(vec.X, vec.Y, 0, 0), i, t;
            <#= quatName #>.Invert(ref quat, out i);
            <#= quatName #>.Multiply(ref quat, ref v, out t);
            <#= quatName #>.Multiply(ref t, ref i, out v);

            result = new <#= vec2Name #>((<#= typeName #>)v.X, (<#= typeName #>)v.Y);
        }

        #endregion
<# } #>

        #endregion

        #region Operators

        /// <summary>
        /// Adds two instances.
        /// </summary>
        /// <param name="left">The left instance.</param>
        /// <param name="right">The right instance.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator +(<#= vec2Name #> left, <#= vec2Name #> right)
        {
            left.X += right.X;
            left.Y += right.Y;
            return left;
        }

        /// <summary>
        /// Subtracts two instances.
        /// </summary>
        /// <param name="left">The left instance.</param>
        /// <param name="right">The right instance.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator -(<#= vec2Name #> left, <#= vec2Name #> right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            return left;
        }

        /// <summary>
        /// Negates an instance.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator -(<#= vec2Name #> vec)
        {
            vec.X = (<#= typeName #>)-vec.X;
            vec.Y = (<#= typeName #>)-vec.Y;
            return vec;
        }

        /// <summary>
        /// Multiplies an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="f">The scalar.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator *(<#= vec2Name #> vec, <#= typeName #> f)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        /// <summary>
        /// Multiply an instance by a scalar.
        /// </summary>
        /// <param name="f">The scalar.</param>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator *(<#= typeName #> f, <#= vec2Name #> vec)
        {
            vec.X *= f;
            vec.Y *= f;
            return vec;
        }

        /// <summary>
        /// Divides an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="f">The scalar.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec2Name #> operator /(<#= vec2Name #> vec, <#= typeName #> f)
        {
            double mult = 1.0 / f;
            vec.X = (<#= typeName #>)(vec.X * mult);
            vec.Y = (<#= typeName #>)(vec.Y * mult);
            return vec;
        }

        /// <summary>
        /// Compares two instances for equality.
        /// </summary>
        /// <param name="left">The left instance.</param>
        /// <param name="right">The right instance.</param>
        /// <returns>True, if both instances are equal; false otherwise.</returns>
        public static bool operator ==(<#= vec2Name #> left, <#= vec2Name #> right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Compares two instances for ienquality.
        /// </summary>
        /// <param name="left">The left instance.</param>
        /// <param name="right">The right instance.</param>
        /// <returns>True, if the instances are not equal; false otherwise.</returns>
        public static bool operator !=(<#= vec2Name #> left, <#= vec2Name #> right)
        {
            return !left.Equals(right);
        }

        /// <summary>Converts OpenTK.Vector2 to <#= vec2Name #>.</summary>
        /// <param name="v2">The Vector2 to convert.</param>
        /// <returns>The resulting <#= vec2Name #>.</returns>
        public static explicit operator <#= vec2Name #>(Vector2 v2)
        {
            return new <#= vec2Name #>((<#= typeName #>)v2.X, (<#= typeName #>)v2.Y);
        }

        /// <summary>Converts OpenTK.<#= vec2Name #> to OpenTK.Vector2.</summary>
        /// <param name="v2d">The <#= vec2Name #> to convert.</param>
        /// <returns>The resulting Vector2.</returns>
        public static explicit operator Vector2(<#= vec2Name #> v2d)
        {
            return new Vector2((float)v2d.X, (float)v2d.Y);
        }

		public static bool operator <(<#= vec2Name #> l, <#= vec2Name #> r)
        {
			if (l.X != r.X) return l.X < r.X;
			if (l.Y != r.Y) return l.Y < r.Y;
			return false; //< They are equal
		}

		public static bool operator >(<#= vec2Name #> l, <#= vec2Name #> r)
        {
			if (l.X != r.X) return l.X > r.X;
			if (l.Y != r.Y) return l.Y > r.Y;
			return false; //< They are equal
		}

        #endregion

        #region Overrides

        #region public override string ToString()

        /// <summary>
        /// Returns a System.String that represents the current instance.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return String.Format("({0}, {1})", X, Y);
        }

        #endregion

        #region public override int GetHashCode()

        /// <summary>
        /// Returns the hashcode for this instance.
        /// </summary>
        /// <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode();
        }

        #endregion

        #region public override bool Equals(object obj)

        /// <summary>
        /// Indicates whether this instance and a specified object are equal.
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>True if the instances are equal; false otherwise.</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is <#= vec2Name #>))
                return false;

            return this.Equals((<#= vec2Name #>)obj);
        }

        #endregion

        #endregion

        #endregion

        #region IEquatable<<#= vec2Name #>> Members

        /// <summary>Indicates whether the current vector is equal to another vector.</summary>
        /// <param name="other">A vector to compare with this vector.</param>
        /// <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        public bool Equals(<#= vec2Name #> other)
        {
            return
                X == other.X &&
                Y == other.Y;
        }

        #endregion
    }

      /// <summary>
    /// Represents a 3D vector using three <#= typeName #>-precision floating-point numbers.
    /// </summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct <#= vec3Name #> : IEquatable<<#= vec3Name #>>
    {
        #region Fields

        /// <summary>
        /// The X component of the Vector3.
        /// </summary>
        public <#= typeName #> X;

        /// <summary>
        /// The Y component of the Vector3.
        /// </summary>
        public <#= typeName #> Y;

        /// <summary>
        /// The Z component of the Vector3.
        /// </summary>
        public <#= typeName #> Z;

        #endregion

        #region Constructors

        /// <summary>
        /// Constructs a new Vector3.
        /// </summary>
        /// <param name="x">The x component of the Vector3.</param>
        /// <param name="y">The y component of the Vector3.</param>
        /// <param name="z">The z component of the Vector3.</param>
        public <#= vec3Name #>(<#= typeName #> x, <#= typeName #> y, <#= typeName #> z)
        {
            X = x;
            Y = y;
            Z = z;
        }

        /// <summary>
        /// Constructs a new instance from the given <#= vec2Name #>.
        /// </summary>
        /// <param name="v">The <#= vec2Name #> to copy components from.</param>
        public <#= vec3Name #>(<#= vec2Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = 0;
        }

        /// <summary>
        /// Constructs a new instance from the given <#= vec3Name #>.
        /// </summary>
        /// <param name="v">The <#= vec3Name #> to copy components from.</param>
        public <#= vec3Name #>(<#= vec3Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = v.Z;
        }

        /// <summary>
        /// Constructs a new instance from the given <#= vec4Name #>.
        /// </summary>
        /// <param name="v">The <#= vec4Name #> to copy components from.</param>
        public <#= vec3Name #>(<#= vec4Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = v.Z;
        }

<# if (typeName != "double") { #>
        /// <summary>
        /// Constructs a new instance from the given <#= vec4Name #>.
        /// </summary>
        /// <param name="v">The <#= vec4Name #> to copy components from.</param>
        public <#= vec3Name #>(Vector4d v)
        {
            X = (<#= typeName #>)v.X;
            Y = (<#= typeName #>)v.Y;
            Z = (<#= typeName #>)v.Z;
        }

<# } #>
        #endregion

        #region Public Members

        #region Instance

        #region public void Add()

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Add() method instead.")]
        public void Add(<#= vec3Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
            this.Z += right.Z;
        }

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Add() method instead.")]
        public void Add(ref <#= vec3Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
            this.Z += right.Z;
        }

        #endregion public void Add()

        #region public void Sub()

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(<#= vec3Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
            this.Z -= right.Z;
        }

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(ref <#= vec3Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
            this.Z -= right.Z;
        }

        #endregion public void Sub()

        #region public void Mult()

        /// <summary>Multiply this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Mult(<#= typeName #> f)
        {
            this.X *= f;
            this.Y *= f;
            this.Z *= f;
        }

        #endregion public void Mult()

        #region public void Div()

        /// <summary>Divide this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Divide() method instead.")]
        public void Div(<#= typeName #> f)
        {
            double mult = 1.0 / f;
            this.X = (<#= typeName #>)(this.X * mult);
            this.Y = (<#= typeName #>)(this.Y * mult);
            this.Z = (<#= typeName #>)(this.Z * mult);
        }

        #endregion public void Div()

        #region public <#= typeName #> Length

        /// <summary>
        /// Gets the length (magnitude) of the vector.
        /// </summary>
        /// <see cref="LengthFast"/>
        /// <seealso cref="LengthSquared"/>
        public double Length
        {
            get
            {
                return System.Math.Sqrt(X * X + Y * Y + Z * Z);
            }
        }

        #endregion

        #region public <#= typeName #> LengthFast

        /// <summary>
        /// Gets an approximation of the vector length (magnitude).
        /// </summary>
        /// <remarks>
        /// This property uses an approximation of the square root function to calculate vector magnitude, with
        /// an upper error bound of 0.001.
        /// </remarks>
        /// <see cref="Length"/>
        /// <seealso cref="LengthSquared"/>
        public double LengthFast
        {
            get
            {
                return 1.0 / OpenTK.MathHelper.InverseSqrtFast(X * X + Y * Y + Z * Z);
            }
        }

        #endregion

        #region public <#= typeName #> LengthSquared

        /// <summary>
        /// Gets the square of the vector length (magnitude).
        /// </summary>
        /// <remarks>
        /// This property avoids the costly square root operation required by the Length property. This makes it more suitable
        /// for comparisons.
        /// </remarks>
        /// <see cref="Length"/>
        /// <seealso cref="LengthFast"/>
        public double LengthSquared
        {
            get
            {
                return X * X + Y * Y + Z * Z;
            }
        }

        #endregion

        #region public void Normalize()

        /// <summary>
        /// Scales the <#= vec3Name #> to unit length.
        /// </summary>
        public void Normalize()
        {
            double scale = 1.0 / this.Length;
            X = (<#= typeName #>)(X * scale);
            Y = (<#= typeName #>)(Y * scale);
            Z = (<#= typeName #>)(Z * scale);
        }

        #endregion

        #region public void NormalizeFast()

        /// <summary>
        /// Scales the <#= vec3Name #> to approximately unit length.
        /// </summary>
        public void NormalizeFast()
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(X * X + Y * Y + Z * Z);
            X = (<#= typeName #>)(X * scale);
            Y = (<#= typeName #>)(Y * scale);
            Z = (<#= typeName #>)(Z * scale);
        }

        #endregion

        #region public void Scale()

        /// <summary>
        /// Scales the current <#= vec3Name #> by the given amounts.
        /// </summary>
        /// <param name="sx">The scale of the X component.</param>
        /// <param name="sy">The scale of the Y component.</param>
        /// <param name="sz">The scale of the Z component.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(<#= typeName #> sx, <#= typeName #> sy, <#= typeName #> sz)
        {
            this.X = X * sx;
            this.Y = Y * sy;
            this.Z = Z * sz;
        }

        /// <summary>Scales this instance by the given parameter.</summary>
        /// <param name="scale">The scaling of the individual components.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(<#= vec3Name #> scale)
        {
            this.X *= scale.X;
            this.Y *= scale.Y;
            this.Z *= scale.Z;
        }

        /// <summary>Scales this instance by the given parameter.</summary>
        /// <param name="scale">The scaling of the individual components.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Multiply() method instead.")]
        public void Scale(ref <#= vec3Name #> scale)
        {
            this.X *= scale.X;
            this.Y *= scale.Y;
            this.Z *= scale.Z;
        }

        #endregion public void Scale()

        #endregion

        #region Static

        #region Fields

        /// <summary>
        /// Defines a unit-length <#= vec3Name #> that points towards the X-axis.
        /// </summary>
        public static readonly <#= vec3Name #> UnitX = new <#= vec3Name #>(1, 0, 0);

        /// <summary>
        /// Defines a unit-length <#= vec3Name #> that points towards the Y-axis.
        /// </summary>
        public static readonly <#= vec3Name #> UnitY = new <#= vec3Name #>(0, 1, 0);

        /// <summary>
        /// /// Defines a unit-length <#= vec3Name #> that points towards the Z-axis.
        /// </summary>
        public static readonly <#= vec3Name #> UnitZ = new <#= vec3Name #>(0, 0, 1);

        /// <summary>
        /// Defines a zero-length Vector3.
        /// </summary>
        public static readonly <#= vec3Name #> Zero = new <#= vec3Name #>(0, 0, 0);

        /// <summary>
        /// Defines an instance with all components set to 1.
        /// </summary>
        public static readonly <#= vec3Name #> One = new <#= vec3Name #>(1, 1, 1);

        /// <summary>
        /// Defines the size of the <#= vec3Name #> struct in bytes.
        /// </summary>
        public static readonly int SizeInBytes = Marshal.SizeOf(new <#= vec3Name #>());

        #endregion

        #region Obsolete

        #region Sub

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>Result of subtraction</returns>
        [Obsolete("Use static Subtract() method instead.")]
        public static <#= vec3Name #> Sub(<#= vec3Name #> a, <#= vec3Name #> b)
        {
            a.X -= b.X;
            a.Y -= b.Y;
            a.Z -= b.Z;
            return a;
        }

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">Result of subtraction</param>
        [Obsolete("Use static Subtract() method instead.")]
        public static void Sub(ref <#= vec3Name #> a, ref <#= vec3Name #> b, out <#= vec3Name #> result)
        {
            result.X = a.X - b.X;
            result.Y = a.Y - b.Y;
            result.Z = a.Z - b.Z;
        }

        #endregion

        #region Mult

        /// <summary>
        /// Multiply a vector and a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="f">Scalar operand</param>
        /// <returns>Result of the multiplication</returns>
        [Obsolete("Use static Multiply() method instead.")]
        public static <#= vec3Name #> Mult(<#= vec3Name #> a, <#= typeName #> f)
        {
            a.X *= f;
            a.Y *= f;
            a.Z *= f;
            return a;
        }

        /// <summary>
        /// Multiply a vector and a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="f">Scalar operand</param>
        /// <param name="result">Result of the multiplication</param>
        [Obsolete("Use static Multiply() method instead.")]
        public static void Mult(ref <#= vec3Name #> a, <#= typeName #> f, out <#= vec3Name #> result)
        {
            result.X = a.X * f;
            result.Y = a.Y * f;
            result.Z = a.Z * f;
        }

        #endregion

        #region Div

        /// <summary>
        /// Divide a vector by a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="f">Scalar operand</param>
        /// <returns>Result of the division</returns>
        [Obsolete("Use static Divide() method instead.")]
        public static <#= vec3Name #> Div(<#= vec3Name #> a, <#= typeName #> f)
        {
            double mult = 1.0 / f;
			a.X = (<#= typeName #>)(a.X * mult);
			a.Y = (<#= typeName #>)(a.Y * mult);
			a.Z = (<#= typeName #>)(a.Z * mult);
            return a;
        }

        /// <summary>
        /// Divide a vector by a scalar
        /// </summary>
        /// <param name="a">Vector operand</param>
        /// <param name="f">Scalar operand</param>
        /// <param name="result">Result of the division</param>
        [Obsolete("Use static Divide() method instead.")]
        public static void Div(ref <#= vec3Name #> a, <#= typeName #> f, out <#= vec3Name #> result)
        {
            double mult = 1.0 / f;
            result.X = (<#= typeName #>)(a.X * mult);
            result.Y = (<#= typeName #>)(a.Y * mult);
            result.Z = (<#= typeName #>)(a.Z * mult);
        }

        #endregion

        #endregion

        #region Add

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <returns>Result of operation.</returns>
        public static <#= vec3Name #> Add(<#= vec3Name #> a, <#= vec3Name #> b)
        {
            Add(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <param name="result">Result of operation.</param>
        public static void Add(ref <#= vec3Name #> a, ref <#= vec3Name #> b, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(a.X + b.X, a.Y + b.Y, a.Z + b.Z);
        }

        #endregion

        #region Subtract

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>Result of subtraction</returns>
        public static <#= vec3Name #> Subtract(<#= vec3Name #> a, <#= vec3Name #> b)
        {
            Subtract(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">Result of subtraction</param>
        public static void Subtract(ref <#= vec3Name #> a, ref <#= vec3Name #> b, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(a.X - b.X, a.Y - b.Y, a.Z - b.Z);
        }

        #endregion

        #region Multiply

        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec3Name #> Multiply(<#= vec3Name #> vector, <#= typeName #> scale)
        {
            Multiply(ref vector, scale, out vector);
            return vector;
        }

<# if (typeName != "double") { #>
        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec3Name #> Multiply(<#= vec3Name #> vector, double scale)
        {
            Multiply(ref vector, scale, out vector);
            return vector;
        }

<# } #>
        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec3Name #> vector, <#= typeName #> scale, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(vector.X * scale, vector.Y * scale, vector.Z * scale);
        }

<# if (typeName != "double") { #>
        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec3Name #> vector, double scale, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>((<#= typeName #>)(vector.X * scale),
			                            (<#= typeName #>)(vector.Y * scale),
			                            (<#= typeName #>)(vector.Z * scale));
        }

<# } #>
        /// <summary>
        /// Multiplies a vector by the components a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec3Name #> Multiply(<#= vec3Name #> vector, <#= vec3Name #> scale)
        {
            Multiply(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Multiplies a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec3Name #> vector, ref <#= vec3Name #> scale, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(vector.X * scale.X, vector.Y * scale.Y, vector.Z * scale.Z);
        }

        #endregion

        #region Divide

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec3Name #> Divide(<#= vec3Name #> vector, <#= typeName #> scale)
        {
            Divide(ref vector, scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec3Name #> vector, <#= typeName #> scale, out <#= vec3Name #> result)
        {
            Multiply(ref vector, 1 / scale, out result);
        }

        /// <summary>
        /// Divides a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec3Name #> Divide(<#= vec3Name #> vector, <#= vec3Name #> scale)
        {
            Divide(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divide a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec3Name #> vector, ref <#= vec3Name #> scale, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(vector.X / scale.X, vector.Y / scale.Y, vector.Z / scale.Z);
        }

        #endregion

        #region ComponentMin

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise minimum</returns>
        public static <#= vec3Name #> ComponentMin(<#= vec3Name #> a, <#= vec3Name #> b)
        {
            a.X = a.X < b.X ? a.X : b.X;
            a.Y = a.Y < b.Y ? a.Y : b.Y;
            a.Z = a.Z < b.Z ? a.Z : b.Z;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise minimum</param>
        public static void ComponentMin(ref <#= vec3Name #> a, ref <#= vec3Name #> b, out <#= vec3Name #> result)
        {
            result.X = a.X < b.X ? a.X : b.X;
            result.Y = a.Y < b.Y ? a.Y : b.Y;
            result.Z = a.Z < b.Z ? a.Z : b.Z;
        }

        #endregion

        #region ComponentMax

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise maximum</returns>
        public static <#= vec3Name #> ComponentMax(<#= vec3Name #> a, <#= vec3Name #> b)
        {
            a.X = a.X > b.X ? a.X : b.X;
            a.Y = a.Y > b.Y ? a.Y : b.Y;
            a.Z = a.Z > b.Z ? a.Z : b.Z;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise maximum</param>
        public static void ComponentMax(ref <#= vec3Name #> a, ref <#= vec3Name #> b, out <#= vec3Name #> result)
        {
            result.X = a.X > b.X ? a.X : b.X;
            result.Y = a.Y > b.Y ? a.Y : b.Y;
            result.Z = a.Z > b.Z ? a.Z : b.Z;
        }

        #endregion

        #region Min

        /// <summary>
        /// Returns the <#= vec3Name #> with the minimum magnitude
        /// </summary>
        /// <param name="left">Left operand</param>
        /// <param name="right">Right operand</param>
        /// <returns>The minimum Vector3</returns>
        public static <#= vec3Name #> Min(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            return left.LengthSquared < right.LengthSquared ? left : right;
        }

        #endregion

        #region Max

        /// <summary>
        /// Returns the <#= vec3Name #> with the minimum magnitude
        /// </summary>
        /// <param name="left">Left operand</param>
        /// <param name="right">Right operand</param>
        /// <returns>The minimum Vector3</returns>
        public static <#= vec3Name #> Max(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            return left.LengthSquared >= right.LengthSquared ? left : right;
        }

        #endregion

        #region Clamp

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <returns>The clamped vector</returns>
        public static <#= vec3Name #> Clamp(<#= vec3Name #> vec, <#= vec3Name #> min, <#= vec3Name #> max)
        {
            vec.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            vec.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
            vec.Z = vec.Z < min.Z ? min.Z : vec.Z > max.Z ? max.Z : vec.Z;
            return vec;
        }

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <param name="result">The clamped vector</param>
        public static void Clamp(ref <#= vec3Name #> vec, ref <#= vec3Name #> min, ref <#= vec3Name #> max, out <#= vec3Name #> result)
        {
            result.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            result.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
            result.Z = vec.Z < min.Z ? min.Z : vec.Z > max.Z ? max.Z : vec.Z;
        }

        #endregion

        #region Normalize

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec3Name #> Normalize(<#= vec3Name #> vec)
        {
            double scale = 1.0 / vec.Length;
			vec.X = (<#= typeName #>)(vec.X * scale);
			vec.Y = (<#= typeName #>)(vec.Y * scale);
			vec.Z = (<#= typeName #>)(vec.Z * scale);
            return vec;
        }

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void Normalize(ref <#= vec3Name #> vec, out <#= vec3Name #> result)
        {
            double scale = 1.0 / vec.Length;
			result.X = (<#= typeName #>)(vec.X * scale);
			result.Y = (<#= typeName #>)(vec.Y * scale);
			result.Z = (<#= typeName #>)(vec.Z * scale);
        }

        #endregion

        #region NormalizeFast

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec3Name #> NormalizeFast(<#= vec3Name #> vec)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z);
			vec.X = (<#= typeName #>)(vec.X * scale);
			vec.Y = (<#= typeName #>)(vec.Y * scale);
			vec.Z = (<#= typeName #>)(vec.Z * scale);
            return vec;
        }

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void NormalizeFast(ref <#= vec3Name #> vec, out <#= vec3Name #> result)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z);
			result.X = (<#= typeName #>)(vec.Z * scale);
			result.Y = (<#= typeName #>)(vec.Z * scale);
			result.Z = (<#= typeName #>)(vec.Z * scale);
        }

        #endregion

        #region Dot

        /// <summary>
        /// Calculate the dot (scalar) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <returns>The dot product of the two inputs</returns>
        public static <#= typeName #> Dot(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        /// <summary>
        /// Calculate the dot (scalar) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <param name="result">The dot product of the two inputs</param>
        public static void Dot(ref <#= vec3Name #> left, ref <#= vec3Name #> right, out <#= typeName #> result)
        {
            result = left.X * right.X + left.Y * right.Y + left.Z * right.Z;
        }

        #endregion

        #region Cross

        /// <summary>
        /// Caclulate the cross (vector) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <returns>The cross product of the two inputs</returns>
        public static <#= vec3Name #> Cross(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            <#= vec3Name #> result;
            Cross(ref left, ref right, out result);
            return result;
        }

        /// <summary>
        /// Caclulate the cross (vector) product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <returns>The cross product of the two inputs</returns>
        /// <param name="result">The cross product of the two inputs</param>
        public static void Cross(ref <#= vec3Name #> left, ref <#= vec3Name #> right, out <#= vec3Name #> result)
        {
            result = new <#= vec3Name #>(left.Y * right.Z - left.Z * right.Y,
                left.Z * right.X - left.X * right.Z,
                left.X * right.Y - left.Y * right.X);
        }

        #endregion

        #region Lerp

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        public static <#= vec3Name #> Lerp(<#= vec3Name #> a, <#= vec3Name #> b, <#= typeName #> blend)
        {
            a.X = blend * (b.X - a.X) + a.X;
            a.Y = blend * (b.Y - a.Y) + a.Y;
            a.Z = blend * (b.Z - a.Z) + a.Z;
            return a;
        }

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        public static void Lerp(ref <#= vec3Name #> a, ref <#= vec3Name #> b, <#= typeName #> blend, out <#= vec3Name #> result)
        {
            result.X = blend * (b.X - a.X) + a.X;
            result.Y = blend * (b.Y - a.Y) + a.Y;
            result.Z = blend * (b.Z - a.Z) + a.Z;
        }

        #endregion

        #region Barycentric

        /// <summary>
        /// Interpolate 3 Vectors using Barycentric coordinates
        /// </summary>
        /// <param name="a">First input Vector</param>
        /// <param name="b">Second input Vector</param>
        /// <param name="c">Third input Vector</param>
        /// <param name="u">First Barycentric Coordinate</param>
        /// <param name="v">Second Barycentric Coordinate</param>
        /// <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        public static <#= vec3Name #> BaryCentric(<#= vec3Name #> a, <#= vec3Name #> b, <#= vec3Name #> c, <#= typeName #> u, <#= typeName #> v)
        {
            return a + u * (b - a) + v * (c - a);
        }

        /// <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
        /// <param name="a">First input Vector.</param>
        /// <param name="b">Second input Vector.</param>
        /// <param name="c">Third input Vector.</param>
        /// <param name="u">First Barycentric Coordinate.</param>
        /// <param name="v">Second Barycentric Coordinate.</param>
        /// <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        public static void BaryCentric(ref <#= vec3Name #> a, ref <#= vec3Name #> b, ref <#= vec3Name #> c, <#= typeName #> u, <#= typeName #> v, out <#= vec3Name #> result)
        {
            result = a; // copy

            <#= vec3Name #> temp = b; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, u, out temp);
            Add(ref result, ref temp, out result);

            temp = c; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, v, out temp);
            Add(ref result, ref temp, out result);
        }

        #endregion
<# if (hasDec[i]) { #>
        #region Transform

        /// <summary>Transform a direction vector by the given Matrix
        /// Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
        /// </summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed vector</returns>
        public static <#= vec3Name #> TransformVector(<#= vec3Name #> vec, Matrix4d mat)
        {
            return new <#= vec3Name #>(
                <#= vec3Name #>.Dot(vec, new <#= vec3Name #>(mat.Column0)),
                <#= vec3Name #>.Dot(vec, new <#= vec3Name #>(mat.Column1)),
                <#= vec3Name #>.Dot(vec, new <#= vec3Name #>(mat.Column2)));
        }

        /// <summary>Transform a direction vector by the given Matrix
        /// Assumes the matrix has a bottom row of (0,0,0,1), that is the translation part is ignored.
        /// </summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed vector</param>
        public static void TransformVector(ref <#= vec3Name #> vec, ref Matrix4d mat, out <#= vec3Name #> result)
        {
            result.X = (<#= typeName #>)(vec.X * mat.Row0.X +
                       vec.Y * mat.Row1.X +
                       vec.Z * mat.Row2.X);

            result.Y = (<#= typeName #>)(vec.X * mat.Row0.Y +
                       vec.Y * mat.Row1.Y +
                       vec.Z * mat.Row2.Y);

            result.Z = (<#= typeName #>)(vec.X * mat.Row0.Z +
                       vec.Y * mat.Row1.Z +
                       vec.Z * mat.Row2.Z);
        }

        /// <summary>Transform a Normal by the given Matrix</summary>
        /// <remarks>
        /// This calculates the inverse of the given matrix, use TransformNormalInverse if you
        /// already have the inverse to avoid this extra calculation
        /// </remarks>
        /// <param name="norm">The normal to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed normal</returns>
        public static <#= vec3Name #> TransformNormal(<#= vec3Name #> norm, Matrix4d mat)
        {
            mat.Invert();
            return TransformNormalInverse(norm, mat);
        }

        /// <summary>Transform a Normal by the given Matrix</summary>
        /// <remarks>
        /// This calculates the inverse of the given matrix, use TransformNormalInverse if you
        /// already have the inverse to avoid this extra calculation
        /// </remarks>
        /// <param name="norm">The normal to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed normal</param>
        public static void TransformNormal(ref <#= vec3Name #> norm, ref Matrix4d mat, out <#= vec3Name #> result)
        {
            Matrix4d Inverse = Matrix4d.Invert(mat);
            <#= vec3Name #>.TransformNormalInverse(ref norm, ref Inverse, out result);
        }

        /// <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
        /// <remarks>
        /// This version doesn't calculate the inverse matrix.
        /// Use this version if you already have the inverse of the desired transform to hand
        /// </remarks>
        /// <param name="norm">The normal to transform</param>
        /// <param name="invMat">The inverse of the desired transformation</param>
        /// <returns>The transformed normal</returns>
        public static <#= vec3Name #> TransformNormalInverse(<#= vec3Name #> norm, Matrix4d invMat)
        {
            return new <#= vec3Name #>(
                <#= vec3Name #>.Dot(norm, new <#= vec3Name #>(invMat.Row0)),
                <#= vec3Name #>.Dot(norm, new <#= vec3Name #>(invMat.Row1)),
                <#= vec3Name #>.Dot(norm, new <#= vec3Name #>(invMat.Row2)));
        }

        /// <summary>Transform a Normal by the (transpose of the) given Matrix</summary>
        /// <remarks>
        /// This version doesn't calculate the inverse matrix.
        /// Use this version if you already have the inverse of the desired transform to hand
        /// </remarks>
        /// <param name="norm">The normal to transform</param>
        /// <param name="invMat">The inverse of the desired transformation</param>
        /// <param name="result">The transformed normal</param>
        public static void TransformNormalInverse(ref <#= vec3Name #> norm, ref Matrix4d invMat, out <#= vec3Name #> result)
        {
            result.X = (<#= typeName #>)(norm.X * invMat.Row0.X +
                       norm.Y * invMat.Row0.Y +
                       norm.Z * invMat.Row0.Z);

            result.Y = (<#= typeName #>)(norm.X * invMat.Row1.X +
                       norm.Y * invMat.Row1.Y +
                       norm.Z * invMat.Row1.Z);

            result.Z = (<#= typeName #>)(norm.X * invMat.Row2.X +
                       norm.Y * invMat.Row2.Y +
                       norm.Z * invMat.Row2.Z);
        }

        /// <summary>Transform a Position by the given Matrix</summary>
        /// <param name="pos">The position to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed position</returns>
        public static <#= vec3Name #> TransformPosition(<#= vec3Name #> pos, Matrix4d mat)
        {
            return new <#= vec3Name #>(
                (<#= typeName #>)(<#= vec3Name #>.Dot(pos, new <#= vec3Name #>(mat.Column0)) + mat.Row3.X),
                (<#= typeName #>)(<#= vec3Name #>.Dot(pos, new <#= vec3Name #>(mat.Column1)) + mat.Row3.Y),
                (<#= typeName #>)(<#= vec3Name #>.Dot(pos, new <#= vec3Name #>(mat.Column2)) + mat.Row3.Z));
        }

        /// <summary>Transform a Position by the given Matrix</summary>
        /// <param name="pos">The position to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed position</param>
        public static void TransformPosition(ref <#= vec3Name #> pos, ref Matrix4d mat, out <#= vec3Name #> result)
        {
            result.X = (<#= typeName #>)(pos.X * mat.Row0.X +
                       pos.Y * mat.Row1.X +
                       pos.Z * mat.Row2.X +
                       mat.Row3.X);

            result.Y = (<#= typeName #>)(pos.X * mat.Row0.Y +
                       pos.Y * mat.Row1.Y +
                       pos.Z * mat.Row2.Y +
                       mat.Row3.Y);

            result.Z = (<#= typeName #>)(pos.X * mat.Row0.Z +
                       pos.Y * mat.Row1.Z +
                       pos.Z * mat.Row2.Z +
                       mat.Row3.Z);
        }

        /// <summary>Transform a Vector by the given Matrix</summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed vector</returns>
        public static <#= vec3Name #> Transform(<#= vec3Name #> vec, Matrix4d mat)
        {
            <#= vec3Name #> result;
            Transform(ref vec, ref mat, out result);
            return result;
        }

        /// <summary>Transform a Vector by the given Matrix</summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed vector</param>
        public static void Transform(ref <#= vec3Name #> vec, ref Matrix4d mat, out <#= vec3Name #> result)
        {
            <#= vec4Name #> v4 = new <#= vec4Name #>(vec.X, vec.Y, vec.Z, 1);
            <#= vec4Name #>.Transform(ref v4, ref mat, out v4);
            result = v4.Xyz;
        }

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec3Name #> Transform(<#= vec3Name #> vec, <#= quatName #> quat)
        {
            <#= vec3Name #> result;
            Transform(ref vec, ref quat, out result);
            return result;
        }

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <param name="result">The result of the operation.</param>
        public static void Transform(ref <#= vec3Name #> vec, ref <#= quatName #> quat, out <#= vec3Name #> result)
        {
            // Since vec.W == 0, we can optimize quat * vec * quat^-1 as follows:
            // vec + 2.0 * cross(quat.xyz, cross(quat.xyz, vec) + quat.w * vec)
            <#= vec3Name #> xyz = (<#= vec3Name #>)quat.Xyz, temp, temp2;
            <#= vec3Name #>.Cross(ref xyz, ref vec, out temp);
            <#= vec3Name #>.Multiply(ref vec, quat.W, out temp2);
            <#= vec3Name #>.Add(ref temp, ref temp2, out temp);
            <#= vec3Name #>.Cross(ref xyz, ref temp, out temp);
            <#= vec3Name #>.Multiply(ref temp, 2, out temp);
            <#= vec3Name #>.Add(ref vec, ref temp, out result);
        }

        /// <summary>
        /// Transform a <#= vec3Name #> by the given Matrix, and project the resulting Vector4 back to a Vector3
        /// </summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed vector</returns>
        public static <#= vec3Name #> TransformPerspective(<#= vec3Name #> vec, Matrix4d mat)
        {
            <#= vec3Name #> result;
            TransformPerspective(ref vec, ref mat, out result);
            return result;
        }

        /// <summary>Transform a <#= vec3Name #> by the given Matrix, and project the resulting <#= vec4Name #> back to a <#= vec3Name #></summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed vector</param>
        public static void TransformPerspective(ref <#= vec3Name #> vec, ref Matrix4d mat, out <#= vec3Name #> result)
        {
            <#= vec4Name #> v = new <#= vec4Name #>(vec);
            <#= vec4Name #>.Transform(ref v, ref mat, out v);
            result.X = v.X / v.W;
            result.Y = v.Y / v.W;
            result.Z = v.Z / v.W;
        }

        #endregion
<# } #>

        #region CalculateAngle

        /// <summary>
        /// Calculates the angle (in radians) between two vectors.
        /// </summary>
        /// <param name="first">The first vector.</param>
        /// <param name="second">The second vector.</param>
        /// <returns>Angle (in radians) between the vectors.</returns>
        /// <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        public static double CalculateAngle(<#= vec3Name #> first, <#= vec3Name #> second)
        {
            return System.Math.Acos((<#= vec3Name #>.Dot(first, second)) / (first.Length * second.Length));
        }

        /// <summary>Calculates the angle (in radians) between two vectors.</summary>
        /// <param name="first">The first vector.</param>
        /// <param name="second">The second vector.</param>
        /// <param name="result">Angle (in radians) between the vectors.</param>
        /// <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        public static void CalculateAngle(ref <#= vec3Name #> first, ref <#= vec3Name #> second, out double result)
        {
            <#= typeName #> temp;
            <#= vec3Name #>.Dot(ref first, ref second, out temp);
            result = System.Math.Acos(temp / (first.Length * second.Length));
        }

        #endregion

        #endregion

        #region Swizzle

        /// <summary>
        /// Gets or sets an OpenTK.<#= vec2Name #> with the X and Y components of this instance.
        /// </summary>
        [XmlIgnore]
        public <#= vec2Name #> Xy { get { return new <#= vec2Name #>(X, Y); } set { X = value.X; Y = value.Y; } }

        #endregion

        #region Operators

        /// <summary>
        /// Adds two instances.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator +(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            left.X += right.X;
            left.Y += right.Y;
            left.Z += right.Z;
            return left;
        }

        /// <summary>
        /// Subtracts two instances.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator -(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            left.Z -= right.Z;
            return left;
        }

        /// <summary>
        /// Negates an instance.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator -(<#= vec3Name #> vec)
        {
            vec.X = (<#= typeName #>)-vec.X;
            vec.Y = (<#= typeName #>)-vec.Y;
            vec.Z = (<#= typeName #>)-vec.Z;
            return vec;
        }

        /// <summary>
        /// Multiplies an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="scale">The scalar.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator *(<#= vec3Name #> vec, <#= typeName #> scale)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            return vec;
        }

        /// <summary>
        /// Multiplies an instance by a scalar.
        /// </summary>
        /// <param name="scale">The scalar.</param>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator *(<#= typeName #> scale, <#= vec3Name #> vec)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            return vec;
        }

        /// <summary>
        /// Divides an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="scale">The scalar.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec3Name #> operator /(<#= vec3Name #> vec, <#= typeName #> scale)
        {
            double mult = 1 / scale;
            vec.X = (<#= typeName #>)(vec.X * mult);
            vec.Y = (<#= typeName #>)(vec.Y * mult);
            vec.Z = (<#= typeName #>)(vec.Z * mult);
            return vec;
        }

        /// <summary>
        /// Compares two instances for equality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left equals right; false otherwise.</returns>
        public static bool operator ==(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Compares two instances for inequality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left does not equa lright; false otherwise.</returns>
        public static bool operator !=(<#= vec3Name #> left, <#= vec3Name #> right)
        {
            return !left.Equals(right);
        }

        /// <summary>Converts OpenTK.Vector3 to <#= vec3Name #>.</summary>
        /// <param name="v3">The Vector3 to convert.</param>
        /// <returns>The resulting <#= vec3Name #>.</returns>
        public static explicit operator <#= vec3Name #>(Vector3 v3)
        {
            return new <#= vec3Name #>((<#= typeName #>)v3.X, (<#= typeName #>)v3.Y, (<#= typeName #>)v3.Z);
        }

		 
		<# if (typeName == "float")
		{
		#>
		/// <summary>Converts Vector3d to <#= vec3Name #>.</summary>
        /// <param name="v3">The Vector3d to convert.</param>
        /// <returns>The resulting <#= vec3Name #>.</returns>
        public static explicit operator <#= vec3Name #>(Vector3d v3)
        {
            return new <#= vec3Name #>((<#= typeName #>)v3.X, (<#= typeName #>)v3.Y, (<#= typeName #>)v3.Z);
        }

		<# } #>
		 
        /// <summary>Converts <#= vec3Name #> to OpenTK.Vector3.</summary>
        /// <param name="v3d">The <#= vec3Name #> to convert.</param>
        /// <returns>The resulting Vector3.</returns>
        public static explicit operator Vector3(<#= vec3Name #> v3d)
        {
            return new Vector3((float)v3d.X, (float)v3d.Y, (float)v3d.Z);
        }

        /// <summary>Converts OpenTK.Vector3d to <#= vec3Name #>.</summary>
        /// <param name="v3">The Vector3d to convert.</param>
        /// <returns>The resulting <#= vec3Name #>.</returns>
        public static explicit operator <#= vec3Name #>(OpenTK.Vector3d v3)
        {
            return new <#= vec3Name #>((<#= typeName #>)v3.X, (<#= typeName #>)v3.Y, (<#= typeName #>)v3.Z);
        }

        /// <summary>Converts <#= vec3Name #> to OpenTK.Vector3d.</summary>
        /// <param name="v3d">The <#= vec3Name #> to convert.</param>
        /// <returns>The resulting Vector3d.</returns>
        public static explicit operator OpenTK.Vector3d(<#= vec3Name #> v3d)
        {
            return new OpenTK.Vector3d((float)v3d.X, (float)v3d.Y, (float)v3d.Z);
        }

		
		public static bool operator <(<#= vec3Name #> l, <#= vec3Name #> r)
        {
			if (l.X != r.X) return l.X < r.X;
			if (l.Y != r.Y) return l.Y < r.Y;
			if (l.Z != r.Z) return l.Z < r.Z;
			return false; //< They are equal
		}

		public static bool operator >(<#= vec3Name #> l, <#= vec3Name #> r)
        {
			if (l.X != r.X) return l.X > r.X;
			if (l.Y != r.Y) return l.Y > r.Y;
			if (l.Z != r.Z) return l.Z > r.Z;
			return false; //< They are equal
		}

        #endregion

        #region Overrides

        #region public override string ToString()

        /// <summary>
        /// Returns a System.String that represents the current Vector3.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return String.Format("({0}, {1}, {2})", X, Y, Z);
        }

        #endregion

        #region public override int GetHashCode()

        /// <summary>
        /// Returns the hashcode for this instance.
        /// </summary>
        /// <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode() ^ Z.GetHashCode();
        }

        #endregion

        #region public override bool Equals(object obj)

        /// <summary>
        /// Indicates whether this instance and a specified object are equal.
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>True if the instances are equal; false otherwise.</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is <#= vec3Name #>))
                return false;

            return this.Equals((<#= vec3Name #>)obj);
        }

        #endregion

        #endregion

        #endregion

        #region IEquatable<Vector3> Members

        /// <summary>Indicates whether the current vector is equal to another vector.</summary>
        /// <param name="other">A vector to compare with this vector.</param>
        /// <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        public bool Equals(<#= vec3Name #> other)
        {
            return
                X == other.X &&
                Y == other.Y &&
                Z == other.Z;
        }

        #endregion
    }


    /// <summary>Represents a 4D vector using four <#= typeName #>-precision floating-point numbers.</summary>
    [Serializable]
    [StructLayout(LayoutKind.Sequential)]
    public struct <#= vec4Name #> : IEquatable<<#= vec4Name #>>
    {
        #region Fields

        /// <summary>
        /// The X component of the <#= vec4Name #>.
        /// </summary>
        public <#= typeName #> X;

        /// <summary>
        /// The Y component of the <#= vec4Name #>.
        /// </summary>
        public <#= typeName #> Y;

        /// <summary>
        /// The Z component of the <#= vec4Name #>.
        /// </summary>
        public <#= typeName #> Z;

        /// <summary>
        /// The W component of the <#= vec4Name #>.
        /// </summary>
        public <#= typeName #> W;

        /// <summary>
        /// Defines a unit-length <#= vec4Name #> that points towards the X-axis.
        /// </summary>
        public static <#= vec4Name #> UnitX = new <#= vec4Name #>(1, 0, 0, 0);

        /// <summary>
        /// Defines a unit-length <#= vec4Name #> that points towards the Y-axis.
        /// </summary>
        public static <#= vec4Name #> UnitY = new <#= vec4Name #>(0, 1, 0, 0);

        /// <summary>
        /// Defines a unit-length <#= vec4Name #> that points towards the Z-axis.
        /// </summary>
        public static <#= vec4Name #> UnitZ = new <#= vec4Name #>(0, 0, 1, 0);

        /// <summary>
        /// Defines a unit-length <#= vec4Name #> that points towards the W-axis.
        /// </summary>
        public static <#= vec4Name #> UnitW = new <#= vec4Name #>(0, 0, 0, 1);

        /// <summary>
        /// Defines a zero-length <#= vec4Name #>.
        /// </summary>
        public static <#= vec4Name #> Zero = new <#= vec4Name #>(0, 0, 0, 0);

        /// <summary>
        /// Defines an instance with all components set to 1.
        /// </summary>
        public static readonly <#= vec4Name #> One = new <#= vec4Name #>(1, 1, 1, 1);

        /// <summary>
        /// Defines the size of the <#= vec4Name #> struct in bytes.
        /// </summary>
        public static readonly int SizeInBytes = Marshal.SizeOf(new <#= vec4Name #>());

        #endregion

        #region Constructors

        /// <summary>
        /// Constructs a new <#= vec4Name #>.
        /// </summary>
        /// <param name="x">The x component of the <#= vec4Name #>.</param>
        /// <param name="y">The y component of the <#= vec4Name #>.</param>
        /// <param name="z">The z component of the <#= vec4Name #>.</param>
        /// <param name="w">The w component of the <#= vec4Name #>.</param>
        public <#= vec4Name #>(<#= typeName #> x, <#= typeName #> y, <#= typeName #> z, <#= typeName #> w)
        {
            X = x;
            Y = y;
            Z = z;
            W = w;
        }

        /// <summary>
        /// Constructs a new <#= vec4Name #> from the given <#= vec2Name #>.
        /// </summary>
        /// <param name="v">The <#= vec2Name #> to copy components from.</param>
        public <#= vec4Name #>(<#= vec2Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = 0;
            W = 0;
        }

        /// <summary>
        /// Constructs a new <#= vec4Name #> from the given <#= vec3Name #>.
        /// </summary>
        /// <param name="v">The <#= vec3Name #> to copy components from.</param>
        public <#= vec4Name #>(<#= vec3Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = v.Z;
            W = 0;
        }

        /// <summary>
        /// Constructs a new <#= vec4Name #> from the specified <#= vec3Name #> and w component.
        /// </summary>
        /// <param name="v">The <#= vec3Name #> to copy components from.</param>
        /// <param name="w">The w component of the new Vector4.</param>
        public <#= vec4Name #>(<#= vec3Name #> v, <#= typeName #> w)
        {
            X = v.X;
            Y = v.Y;
            Z = v.Z;
            W = w;
        }

        /// <summary>
        /// Constructs a new <#= vec4Name #> from the given <#= vec4Name #>.
        /// </summary>
        /// <param name="v">The <#= vec4Name #> to copy components from.</param>
        public <#= vec4Name #>(<#= vec4Name #> v)
        {
            X = v.X;
            Y = v.Y;
            Z = v.Z;
            W = v.W;
        }

        #endregion

        #region Public Members

        #region Instance

        #region public void Add()

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Add() method instead.")]
        public void Add(<#= vec4Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
            this.Z += right.Z;
            this.W += right.W;
        }

        /// <summary>Add the Vector passed as parameter to this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Add() method instead.")]
        public void Add(ref <#= vec4Name #> right)
        {
            this.X += right.X;
            this.Y += right.Y;
            this.Z += right.Z;
            this.W += right.W;
        }

        #endregion public void Add()

        #region public void Sub()

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(<#= vec4Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
            this.Z -= right.Z;
            this.W -= right.W;
        }

        /// <summary>Subtract the Vector passed as parameter from this instance.</summary>
        /// <param name="right">Right operand. This parameter is only read from.</param>
        [CLSCompliant(false)]
        [Obsolete("Use static Subtract() method instead.")]
        public void Sub(ref <#= vec4Name #> right)
        {
            this.X -= right.X;
            this.Y -= right.Y;
            this.Z -= right.Z;
            this.W -= right.W;
        }

        #endregion public void Sub()

        #region public void Mult()

        /// <summary>Multiply this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Multiply() method instead.")]
        public void Mult(<#= typeName #> f)
        {
            this.X *= f;
            this.Y *= f;
            this.Z *= f;
            this.W *= f;
        }

        #endregion public void Mult()

        #region public void Div()

        /// <summary>Divide this instance by a scalar.</summary>
        /// <param name="f">Scalar operand.</param>
        [Obsolete("Use static Divide() method instead.")]
        public void Div(<#= typeName #> f)
        {
            double mult = 1.0 / f;
			this.X = (<#= typeName #>)(this.X * mult);
			this.Y = (<#= typeName #>)(this.Y * mult);
			this.Z = (<#= typeName #>)(this.Z * mult);
			this.W = (<#= typeName #>)(this.W * mult);
        }

        #endregion public void Div()

        #region public <#= typeName #> Length

        /// <summary>
        /// Gets the length (magnitude) of the vector.
        /// </summary>
        /// <see cref="LengthFast"/>
        /// <seealso cref="LengthSquared"/>
        public double Length
        {
            get
            {
                return System.Math.Sqrt(X * X + Y * Y + Z * Z + W * W);
            }
        }

        #endregion

        #region public double LengthFast

        /// <summary>
        /// Gets an approximation of the vector length (magnitude).
        /// </summary>
        /// <remarks>
        /// This property uses an approximation of the square root function to calculate vector magnitude, with
        /// an upper error bound of 0.001.
        /// </remarks>
        /// <see cref="Length"/>
        /// <seealso cref="LengthSquared"/>
        public double LengthFast
        {
            get
            {
                return 1.0 / OpenTK.MathHelper.InverseSqrtFast(X * X + Y * Y + Z * Z + W * W);
            }
        }

        #endregion

        #region public <#= typeName #> LengthSquared

        /// <summary>
        /// Gets the square of the vector length (magnitude).
        /// </summary>
        /// <remarks>
        /// This property avoids the costly square root operation required by the Length property. This makes it more suitable
        /// for comparisons.
        /// </remarks>
        /// <see cref="Length"/>
        public <#= typeName #> LengthSquared
        {
            get
            {
                return X * X + Y * Y + Z * Z + W * W;
            }
        }

        #endregion

        #region public void Normalize()

        /// <summary>
        /// Scales the <#= vec4Name #> to unit length.
        /// </summary>
        public void Normalize()
        {
            double scale = 1.0 / this.Length;
            X = (<#= typeName #>)(X * scale);
            Y = (<#= typeName #>)(Y * scale);
            Z = (<#= typeName #>)(Z * scale);
            W = (<#= typeName #>)(W * scale);
        }

        #endregion

        #region public void NormalizeFast()

        /// <summary>
        /// Scales the <#= vec4Name #> to approximately unit length.
        /// </summary>
        public void NormalizeFast()
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(X * X + Y * Y + Z * Z + W * W);
            X = (<#= typeName #>)(X * scale);
            Y = (<#= typeName #>)(Y * scale);
            Z = (<#= typeName #>)(Z * scale);
            W = (<#= typeName #>)(W * scale);
        }

        #endregion

        #endregion

        #region Static

        #region Add

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <returns>Result of operation.</returns>
        public static <#= vec4Name #> Add(<#= vec4Name #> a, <#= vec4Name #> b)
        {
            Add(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Adds two vectors.
        /// </summary>
        /// <param name="a">Left operand.</param>
        /// <param name="b">Right operand.</param>
        /// <param name="result">Result of operation.</param>
        public static void Add(ref <#= vec4Name #> a, ref <#= vec4Name #> b, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(a.X + b.X, a.Y + b.Y, a.Z + b.Z, a.W + b.W);
        }

        #endregion

        #region Subtract

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>Result of subtraction</returns>
        public static <#= vec4Name #> Subtract(<#= vec4Name #> a, <#= vec4Name #> b)
        {
            Subtract(ref a, ref b, out a);
            return a;
        }

        /// <summary>
        /// Subtract one Vector from another
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">Result of subtraction</param>
        public static void Subtract(ref <#= vec4Name #> a, ref <#= vec4Name #> b, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(a.X - b.X, a.Y - b.Y, a.Z - b.Z, a.W - b.W);
        }

        #endregion

        #region Multiply

        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec4Name #> Multiply(<#= vec4Name #> vector, <#= typeName #> scale)
        {
            Multiply(ref vector, scale, out vector);
            return vector;
        }

        /// <summary>
        /// Multiplies a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec4Name #> vector, <#= typeName #> scale, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(vector.X * scale, vector.Y * scale, vector.Z * scale, vector.W * scale);
        }

        /// <summary>
        /// Multiplies a vector by the components a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec4Name #> Multiply(<#= vec4Name #> vector, <#= vec4Name #> scale)
        {
            Multiply(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Multiplies a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Multiply(ref <#= vec4Name #> vector, ref <#= vec4Name #> scale, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(vector.X * scale.X, vector.Y * scale.Y, vector.Z * scale.Z, vector.W * scale.W);
        }

        #endregion

        #region Divide

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec4Name #> Divide(<#= vec4Name #> vector, <#= typeName #> scale)
        {
            Divide(ref vector, scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divides a vector by a scalar.
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec4Name #> vector, <#= typeName #> scale, out <#= vec4Name #> result)
        {
            Multiply(ref vector, 1 / scale, out result);
        }

        /// <summary>
        /// Divides a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <returns>Result of the operation.</returns>
        public static <#= vec4Name #> Divide(<#= vec4Name #> vector, <#= vec4Name #> scale)
        {
            Divide(ref vector, ref scale, out vector);
            return vector;
        }

        /// <summary>
        /// Divide a vector by the components of a vector (scale).
        /// </summary>
        /// <param name="vector">Left operand.</param>
        /// <param name="scale">Right operand.</param>
        /// <param name="result">Result of the operation.</param>
        public static void Divide(ref <#= vec4Name #> vector, ref <#= vec4Name #> scale, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(vector.X / scale.X, vector.Y / scale.Y, vector.Z / scale.Z, vector.W / scale.W);
        }

        #endregion

        #region Min

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise minimum</returns>
        public static <#= vec4Name #> Min(<#= vec4Name #> a, <#= vec4Name #> b)
        {
            a.X = a.X < b.X ? a.X : b.X;
            a.Y = a.Y < b.Y ? a.Y : b.Y;
            a.Z = a.Z < b.Z ? a.Z : b.Z;
            a.W = a.W < b.W ? a.W : b.W;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise minimum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise minimum</param>
        public static void Min(ref <#= vec4Name #> a, ref <#= vec4Name #> b, out <#= vec4Name #> result)
        {
            result.X = a.X < b.X ? a.X : b.X;
            result.Y = a.Y < b.Y ? a.Y : b.Y;
            result.Z = a.Z < b.Z ? a.Z : b.Z;
            result.W = a.W < b.W ? a.W : b.W;
        }

        #endregion

        #region Max

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <returns>The component-wise maximum</returns>
        public static <#= vec4Name #> Max(<#= vec4Name #> a, <#= vec4Name #> b)
        {
            a.X = a.X > b.X ? a.X : b.X;
            a.Y = a.Y > b.Y ? a.Y : b.Y;
            a.Z = a.Z > b.Z ? a.Z : b.Z;
            a.W = a.W > b.W ? a.W : b.W;
            return a;
        }

        /// <summary>
        /// Calculate the component-wise maximum of two vectors
        /// </summary>
        /// <param name="a">First operand</param>
        /// <param name="b">Second operand</param>
        /// <param name="result">The component-wise maximum</param>
        public static void Max(ref <#= vec4Name #> a, ref <#= vec4Name #> b, out <#= vec4Name #> result)
        {
            result.X = a.X > b.X ? a.X : b.X;
            result.Y = a.Y > b.Y ? a.Y : b.Y;
            result.Z = a.Z > b.Z ? a.Z : b.Z;
            result.W = a.W > b.W ? a.W : b.W;
        }

        #endregion

        #region Clamp

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <returns>The clamped vector</returns>
        public static <#= vec4Name #> Clamp(<#= vec4Name #> vec, <#= vec4Name #> min, <#= vec4Name #> max)
        {
            vec.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            vec.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
            vec.Z = vec.X < min.Z ? min.Z : vec.Z > max.Z ? max.Z : vec.Z;
            vec.W = vec.Y < min.W ? min.W : vec.W > max.W ? max.W : vec.W;
            return vec;
        }

        /// <summary>
        /// Clamp a vector to the given minimum and maximum vectors
        /// </summary>
        /// <param name="vec">Input vector</param>
        /// <param name="min">Minimum vector</param>
        /// <param name="max">Maximum vector</param>
        /// <param name="result">The clamped vector</param>
        public static void Clamp(ref <#= vec4Name #> vec, ref <#= vec4Name #> min, ref <#= vec4Name #> max, out <#= vec4Name #> result)
        {
            result.X = vec.X < min.X ? min.X : vec.X > max.X ? max.X : vec.X;
            result.Y = vec.Y < min.Y ? min.Y : vec.Y > max.Y ? max.Y : vec.Y;
            result.Z = vec.X < min.Z ? min.Z : vec.Z > max.Z ? max.Z : vec.Z;
            result.W = vec.Y < min.W ? min.W : vec.W > max.W ? max.W : vec.W;
        }

        #endregion

        #region Normalize

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec4Name #> Normalize(<#= vec4Name #> vec)
        {
            double scale = 1.0 / vec.Length;
            vec.X = (<#= typeName #>)(vec.X * scale);
            vec.Y = (<#= typeName #>)(vec.Y * scale);
            vec.Z = (<#= typeName #>)(vec.Z * scale);
            vec.W = (<#= typeName #>)(vec.W * scale);
            return vec;
        }

        /// <summary>
        /// Scale a vector to unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void Normalize(ref <#= vec4Name #> vec, out <#= vec4Name #> result)
        {
            double scale = 1.0 / vec.Length;
            result.X = (<#= typeName #>)(vec.X * scale);
            result.Y = (<#= typeName #>)(vec.Y * scale);
            result.Z = (<#= typeName #>)(vec.Z * scale);
            result.W = (<#= typeName #>)(vec.W * scale);
        }

        #endregion

        #region NormalizeFast

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <returns>The normalized vector</returns>
        public static <#= vec4Name #> NormalizeFast(<#= vec4Name #> vec)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z + vec.W * vec.W);
			vec.X = (<#= typeName #>)(vec.X * scale);
            vec.Y = (<#= typeName #>)(vec.Y * scale);
            vec.Z = (<#= typeName #>)(vec.Z * scale);
            vec.W = (<#= typeName #>)(vec.W * scale);
            return vec;
        }

        /// <summary>
        /// Scale a vector to approximately unit length
        /// </summary>
        /// <param name="vec">The input vector</param>
        /// <param name="result">The normalized vector</param>
        public static void NormalizeFast(ref <#= vec4Name #> vec, out <#= vec4Name #> result)
        {
            double scale = OpenTK.MathHelper.InverseSqrtFast(vec.X * vec.X + vec.Y * vec.Y + vec.Z * vec.Z + vec.W * vec.W);
            result.X = (<#= typeName #>)(vec.X * scale);
            result.Y = (<#= typeName #>)(vec.Y * scale);
            result.Z = (<#= typeName #>)(vec.Z * scale);
            result.W = (<#= typeName #>)(vec.W * scale);
        }

        #endregion

        #region Dot

        /// <summary>
        /// Calculate the dot product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <returns>The dot product of the two inputs</returns>
        public static <#= typeName #> Dot(<#= vec4Name #> left, <#= vec4Name #> right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z + left.W * right.W;
        }
		public static <#= typeName #> Dot(<#= vec4Name #> left, <#= vec3Name #> right)
        {
            return left.X * right.X + left.Y * right.Y + left.Z * right.Z + left.W;
        }

        /// <summary>
        /// Calculate the dot product of two vectors
        /// </summary>
        /// <param name="left">First operand</param>
        /// <param name="right">Second operand</param>
        /// <param name="result">The dot product of the two inputs</param>
        public static void Dot(ref <#= vec4Name #> left, ref <#= vec4Name #> right, out <#= typeName #> result)
        {
            result = left.X * right.X + left.Y * right.Y + left.Z * right.Z + left.W * right.W;
        }

        #endregion

        #region Lerp

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        public static <#= vec4Name #> Lerp(<#= vec4Name #> a, <#= vec4Name #> b, <#= typeName #> blend)
        {
            a.X = blend * (b.X - a.X) + a.X;
            a.Y = blend * (b.Y - a.Y) + a.Y;
            a.Z = blend * (b.Z - a.Z) + a.Z;
            a.W = blend * (b.W - a.W) + a.W;
            return a;
        }

        /// <summary>
        /// Returns a new Vector that is the linear blend of the 2 given Vectors
        /// </summary>
        /// <param name="a">First input vector</param>
        /// <param name="b">Second input vector</param>
        /// <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
        /// <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        public static void Lerp(ref <#= vec4Name #> a, ref <#= vec4Name #> b, <#= typeName #> blend, out <#= vec4Name #> result)
        {
            result.X = blend * (b.X - a.X) + a.X;
            result.Y = blend * (b.Y - a.Y) + a.Y;
            result.Z = blend * (b.Z - a.Z) + a.Z;
            result.W = blend * (b.W - a.W) + a.W;
        }

        #endregion

        #region Barycentric

        /// <summary>
        /// Interpolate 3 Vectors using Barycentric coordinates
        /// </summary>
        /// <param name="a">First input Vector</param>
        /// <param name="b">Second input Vector</param>
        /// <param name="c">Third input Vector</param>
        /// <param name="u">First Barycentric Coordinate</param>
        /// <param name="v">Second Barycentric Coordinate</param>
        /// <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        public static <#= vec4Name #> BaryCentric(<#= vec4Name #> a, <#= vec4Name #> b, <#= vec4Name #> c, <#= typeName #> u, <#= typeName #> v)
        {
            return a + u * (b - a) + v * (c - a);
        }

        /// <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
        /// <param name="a">First input Vector.</param>
        /// <param name="b">Second input Vector.</param>
        /// <param name="c">Third input Vector.</param>
        /// <param name="u">First Barycentric Coordinate.</param>
        /// <param name="v">Second Barycentric Coordinate.</param>
        /// <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        public static void BaryCentric(ref <#= vec4Name #> a, ref <#= vec4Name #> b, ref <#= vec4Name #> c, <#= typeName #> u, <#= typeName #> v, out <#= vec4Name #> result)
        {
            result = a; // copy

            <#= vec4Name #> temp = b; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, u, out temp);
            Add(ref result, ref temp, out result);

            temp = c; // copy
            Subtract(ref temp, ref a, out temp);
            Multiply(ref temp, v, out temp);
            Add(ref result, ref temp, out result);
        }

        #endregion
<# if (hasDec[i]) { #>

        #region Transform

        /// <summary>Transform a Vector by the given Matrix</summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <returns>The transformed vector</returns>
        public static <#= vec4Name #> Transform(<#= vec4Name #> vec, Matrix4d mat)
        {
            <#= vec4Name #> result;
            Transform(ref vec, ref mat, out result);
            return result;
        }

        /// <summary>Transform a Vector by the given Matrix</summary>
        /// <param name="vec">The vector to transform</param>
        /// <param name="mat">The desired transformation</param>
        /// <param name="result">The transformed vector</param>
        public static void Transform(ref <#= vec4Name #> vec, ref Matrix4d mat, out <#= vec4Name #> result)
        {
            result = new <#= vec4Name #>(
                (<#= typeName #>)(vec.X * mat.Row0.X + vec.Y * mat.Row1.X + vec.Z * mat.Row2.X + vec.W * mat.Row3.X),
                (<#= typeName #>)(vec.X * mat.Row0.Y + vec.Y * mat.Row1.Y + vec.Z * mat.Row2.Y + vec.W * mat.Row3.Y),
                (<#= typeName #>)(vec.X * mat.Row0.Z + vec.Y * mat.Row1.Z + vec.Z * mat.Row2.Z + vec.W * mat.Row3.Z),
                (<#= typeName #>)(vec.X * mat.Row0.W + vec.Y * mat.Row1.W + vec.Z * mat.Row2.W + vec.W * mat.Row3.W));
        }

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <returns>The result of the operation.</returns>
        public static <#= vec4Name #> Transform(<#= vec4Name #> vec, <#= quatName #> quat)
        {
            <#= vec4Name #> result;
            Transform(ref vec, ref quat, out result);
            return result;
        }

        /// <summary>
        /// Transforms a vector by a quaternion rotation.
        /// </summary>
        /// <param name="vec">The vector to transform.</param>
        /// <param name="quat">The quaternion to rotate the vector by.</param>
        /// <param name="result">The result of the operation.</param>
        public static void Transform(ref <#= vec4Name #> vec, ref <#= quatName #> quat, out <#= vec4Name #> result)
        {
            <#= quatName #> v = new <#= quatName #>(vec.X, vec.Y, vec.Z, vec.W), i, t;
            <#= quatName #>.Invert(ref quat, out i);
            <#= quatName #>.Multiply(ref quat, ref v, out t);
            <#= quatName #>.Multiply(ref t, ref i, out v);

            result = new <#= vec4Name #>((<#= typeName #>)v.X, (<#= typeName #>)v.Y, (<#= typeName #>)v.Z, (<#= typeName #>)v.W);
        }

        #endregion
<# } #>

        #endregion

        #region Swizzle

        /// <summary>
        /// Gets or sets an OpenTK.<#= vec2Name #> with the X and Y components of this instance.
        /// </summary>
        [XmlIgnore]
        public <#= vec2Name #> Xy { get { return new <#= vec2Name #>(X, Y); } set { X = value.X; Y = value.Y; } }

        /// <summary>
        /// Gets or sets an OpenTK.<#= vec3Name #> with the X, Y and Z components of this instance.
        /// </summary>
        [XmlIgnore]
        public <#= vec3Name #> Xyz { get { return new <#= vec3Name #>(X, Y, Z); } set { X = value.X; Y = value.Y; Z = value.Z; } }

        #endregion

        #region Operators

        /// <summary>
        /// Adds two instances.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator +(<#= vec4Name #> left, <#= vec4Name #> right)
        {
            left.X += right.X;
            left.Y += right.Y;
            left.Z += right.Z;
            left.W += right.W;
            return left;
        }

        /// <summary>
        /// Subtracts two instances.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator -(<#= vec4Name #> left, <#= vec4Name #> right)
        {
            left.X -= right.X;
            left.Y -= right.Y;
            left.Z -= right.Z;
            left.W -= right.W;
            return left;
        }

        /// <summary>
        /// Negates an instance.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator -(<#= vec4Name #> vec)
        {
            vec.X = (<#= typeName #>)-vec.X;
            vec.Y = (<#= typeName #>)-vec.Y;
            vec.Z = (<#= typeName #>)-vec.Z;
            vec.W = (<#= typeName #>)-vec.W;
            return vec;
        }

        /// <summary>
        /// Multiplies an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="scale">The scalar.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator *(<#= vec4Name #> vec, <#= typeName #> scale)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            vec.W *= scale;
            return vec;
        }

        /// <summary>
        /// Multiplies an instance by a scalar.
        /// </summary>
        /// <param name="scale">The scalar.</param>
        /// <param name="vec">The instance.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator *(<#= typeName #> scale, <#= vec4Name #> vec)
        {
            vec.X *= scale;
            vec.Y *= scale;
            vec.Z *= scale;
            vec.W *= scale;
            return vec;
        }

        /// <summary>
        /// Divides an instance by a scalar.
        /// </summary>
        /// <param name="vec">The instance.</param>
        /// <param name="scale">The scalar.</param>
        /// <returns>The result of the calculation.</returns>
        public static <#= vec4Name #> operator /(<#= vec4Name #> vec, <#= typeName #> scale)
        {
            double mult = 1 / scale;
			vec.X = (<#= typeName #>)(vec.X * mult);
			vec.Y = (<#= typeName #>)(vec.Y * mult);
			vec.Z = (<#= typeName #>)(vec.Z * mult);
			vec.W = (<#= typeName #>)(vec.W * mult);
            return vec;
        }

        /// <summary>
        /// Compares two instances for equality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left equals right; false otherwise.</returns>
        public static bool operator ==(<#= vec4Name #> left, <#= vec4Name #> right)
        {
            return left.Equals(right);
        }

        /// <summary>
        /// Compares two instances for inequality.
        /// </summary>
        /// <param name="left">The first instance.</param>
        /// <param name="right">The second instance.</param>
        /// <returns>True, if left does not equa lright; false otherwise.</returns>
        public static bool operator !=(<#= vec4Name #> left, <#= vec4Name #> right)
        {
            return !left.Equals(right);
        }

        /// <summary>
        /// Returns a pointer to the first element of the specified instance.
        /// </summary>
        /// <param name="v">The instance.</param>
        /// <returns>A pointer to the first element of v.</returns>
        [CLSCompliant(false)]
        unsafe public static explicit operator <#= typeName #>*(<#= vec4Name #> v)
        {
            return &v.X;
        }

        /// <summary>
        /// Returns a pointer to the first element of the specified instance.
        /// </summary>
        /// <param name="v">The instance.</param>
        /// <returns>A pointer to the first element of v.</returns>
        public static explicit operator IntPtr(<#= vec4Name #> v)
        {
            unsafe
            {
                return (IntPtr)(&v.X);
            }
        }

        /// <summary>Converts OpenTK.Vector4 to OpenTK.<#= vec4Name #>.</summary>
        /// <param name="v4">The Vector4 to convert.</param>
        /// <returns>The resulting <#= vec4Name #>.</returns>
        public static explicit operator <#= vec4Name #>(Vector4 v4)
        {
            return new <#= vec4Name #>((<#= typeName #>)v4.X, (<#= typeName #>)v4.Y, (<#= typeName #>)v4.Z, (<#= typeName #>)v4.W);
        }

        /// <summary>Converts OpenTK.<#= vec4Name #> to OpenTK.Vector4.</summary>
        /// <param name="v4d">The <#= vec4Name #> to convert.</param>
        /// <returns>The resulting Vector4.</returns>
        public static explicit operator Vector4(<#= vec4Name #> v4d)
        {
            return new Vector4((float)v4d.X, (float)v4d.Y, (float)v4d.Z, (float)v4d.W);
        }
				
		public static bool operator <(<#= vec4Name #> l, <#= vec4Name #> r)
        {
			if (l.X != r.X) return l.X < r.X;
			if (l.Y != r.Y) return l.Y < r.Y;
			if (l.Z != r.Z) return l.Z < r.Z;
			if (l.W != r.W) return l.W < r.W;
			return false; //< They are equal
		}

		public static bool operator >(<#= vec4Name #> l, <#= vec4Name #> r)
        {
			if (l.X != r.X) return l.X > r.X;
			if (l.Y != r.Y) return l.Y > r.Y;
			if (l.Z != r.Z) return l.Z > r.Z;
			if (l.W != r.W) return l.W > r.W;
			return false; //< They are equal
		}

        #endregion

        #region Overrides

        #region public override string ToString()

        /// <summary>
        /// Returns a System.String that represents the current <#= vec4Name #>.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return String.Format("({0}, {1}, {2}, {3})", X, Y, Z, W);
        }

        #endregion

        #region public override int GetHashCode()

        /// <summary>
        /// Returns the hashcode for this instance.
        /// </summary>
        /// <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        public override int GetHashCode()
        {
            return X.GetHashCode() ^ Y.GetHashCode() ^ Z.GetHashCode() ^ W.GetHashCode();
        }

        #endregion

        #region public override bool Equals(object obj)

        /// <summary>
        /// Indicates whether this instance and a specified object are equal.
        /// </summary>
        /// <param name="obj">The object to compare to.</param>
        /// <returns>True if the instances are equal; false otherwise.</returns>
        public override bool Equals(object obj)
        {
            if (!(obj is <#= vec4Name #>))
                return false;

            return this.Equals((<#= vec4Name #>)obj);
        }

        #endregion

        #endregion

        #endregion

        #region IEquatable<<#= vec4Name #>> Members

        /// <summary>Indicates whether the current vector is equal to another vector.</summary>
        /// <param name="other">A vector to compare with this vector.</param>
        /// <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        public bool Equals(<#= vec4Name #> other)
        {
            return
                X == other.X &&
                Y == other.Y &&
                Z == other.Z &&
                W == other.W;
        }

        #endregion
    }

	<# } #>
}

using Sxta.Render;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SxtaUI2.Core
{
    /// <summary>
    /// The abstract base class for any visual object that can be attached to any element.
    /// </summary>
    public abstract class Decorator
    {
        public Decorator()
        {
            instancer = null;
            z_index = 0;
            specificity = -1;
        }

        /// Called on a decorator to generate any required per-element data for a newly decorated element.
        /// @param[in] element The newly decorated element.
        /// @return A handle to a decorator-defined data handle, or NULL if none is needed for the element.
        public abstract DecoratorDataHandle GenerateElementData(Element element);

        /// Called to release element data generated by this decorator.
        /// @param[in] element_data The element data handle to release.
        public abstract void ReleaseElementData(DecoratorDataHandle element_data);

        /// Sets the z-index of the decorator. A decorator with a higher z-index will be rendered after a decorator
        /// with a lower z-index. By default, all decorators have a z-index of 0.
        /// @param[in] z-index The new z-index of the decorator.
        public void SetZIndex(float _z_index)
        {
            z_index = _z_index;
        }

        /// Returns the decorator's z-index.
        /// @return The z-index of the decorator.
        public float GetZIndex()
        {
            return z_index;
        }

        /// Sets the specificity of the decorator.
        /// @param[in] specificity The specificity of the decorator.
        public void SetSpecificity(int _specificity)
        {
            specificity = _specificity;
        }

        /// Returns the specificity of the decorator. This is used when multiple pseudo-classes are active on an
        /// element, each with similarly-named decorators.
        /// @return The specificity of the decorator.
        public int GetSpecificity()
        {
            return specificity;
        }

        /// Called to render the decorator on an element.
        /// @param[in] element The element to render the decorator on.
        /// @param[in] element_data The handle to the data generated by the decorator for the element.
        public abstract void RenderElement(Element element, DecoratorDataHandle element_data);

        /// Value specifying an invalid or non-existent Decorator data handle.
        public const DecoratorDataHandle INVALID_DECORATORDATAHANDLE = null;


        /// Releases the decorator through its instancer.
        protected virtual void OnReferenceDeactivate()
        {
            throw new NotImplementedException();
        }


        /// Attempts to load a texture into the list of textures in use by the decorator.
        /// @param[in] texture_name The name of the texture to load.
        /// @param[in] rcss_path The RCSS file the decorator definition was loaded from; this is used to resolve relative paths.
        /// @return The index of the texture if the load was successful, or -1 if the load failed.
        protected int LoadTexture(string texture_name, string rcss_path)
        {
#if TODO
            for (int i = 0; i < textures.Count; i++)
            {
                if (texture_name == textures[i].Name)
                    return (int)i;
            }

            Texture texture;
            if (!texture.Load(texture_name, rcss_path))
                return -1;

            textures.Add(texture);
            return (int)textures.Count - 1;
#endif
            throw new NotImplementedException();
        }

        /// Returns one of the decorator's previously loaded textures.
        /// @param[in] index The index of the desired texture.
        /// @return The texture at the appropriate index, or NULL if the index was invalid.
        protected Texture GetTexture(int index = 0)
        {
            if (index < 0 || index >= (int)textures.Count)
                return null;

            return textures[index];
        }

        /// Returns the floating-point value of a numerical property from a dictionary of properties, resolving it
        /// against a base value if it is a relative property.
        /// @param[in] properties The user-supplied dictionary of properties.
        /// @param[in] name The name of the desired property. This must be a numerical property.
        /// @return The fully-resolved value of the property, or 0 if an error occured.
        protected float ResolveProperty(PropertyDictionary properties, string name, float base_value)
        {
            throw new NotImplementedException();
        }


        private DecoratorInstancer instancer;

        // The z-index of this decorator, used to resolve render order when multiple decorators are rendered
        // simultaneously on the same element.
        private float z_index;
        // The maximum specificity of the properties used to define the decorator.
        private int specificity;

        // Stores a list of textures in use by this decorator.
        private List<Texture> textures;
    }
}
